package com.demo.exportword.freemarker;

import freemarker.template.Configuration;
import freemarker.template.TemplateException;
import org.junit.Test;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @Author junode
 * @Date 2021/9/4
 */
public class Demo {

    @Test
    public void test1() {
        List<Table> list = new ArrayList<Table>();

        list.add(new Table("1", "复杂", "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"));
        list.add(new Table("2", "复杂", "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"));
        list.add(new Table("3", "简单", "iVBORw0KGgoAAAANSUhEUgAAAEcAAAAuCAYAAAB6SwSNAAACUElEQVRoQ+3YS4jOURjH8c9sRC5ZsEFWyoJYuJaws1RYuG+ISBRlo1gjkySixMIlKxuhsJASGxuUxIKydEmRSNGTZzTzNjPN++993/+YOWd9Ouc53/N7rl3KGpBAV2EzMIECZxB1FDgFTrXgUZRTlFOUU41AUU41biXmFOUU5VQj8J8rZxy24xMW4zNO4FvLaTQcONxjTti3Ey/wCONxMgEdxs92AhrucKZgH471UspqHMEGvBnNcGbhOs7hQoJYhjtYhSejGU4oexK+93KhtTiALXg7muE0vj1AncJTnMHvAucvgVDRZszG0ZKt+spiBZbidLpZO0Xz7zfafkkLLlieNc7ZBDMTX7P2acHx/R9RRyqfiG34gbm4j1tYh6mYjPe4jF/pRpGZIltFYA6b9+L2SEvlUcQdwhW8xDxczJR8Fw9wHAuzjvmC81jT8LcBc2sWgyNGORvxEQEi1gxcw4dsESbgEp4nxFBKbauTbhXutD8DavRHsRbgZvZK0Ra0NTU3S7mTcPqzLVJzuFjElHvNGt/u/XXCGZP1yhJswrt2P7bZ8+uEMw1X8Srdrdb40h+4OuH0NJAHMyP12Lc7xxPPmv3pVu/vFJy4Z32m6V3ZVUdw7sZKPMyHTceOHFHUrqROwRmbIOZnyo4CMOY0c3AjlRMTvz1ZEEYNVPvqFJx46KIcM8QMJoZYEW+iDQggj7M6DlCva6eSBnQSznB585DtKHAGQVXgFDhD9qQ+G4tyinKKcqoRKMqpxq3EnKKcopxqBIpyqnErMacop5py/gBVM1wveQ1hRgAAAABJRU5ErkJggg=="));

        Map<String, Object> map = new HashMap<String, Object>() {{
            put("Tables", list);
        }};

        FileWriter out = null;

        try {
            out = new FileWriter(new File("D:/rebey.doc"));
            FreemarkerUtil.process("rebey.ftl", map, out);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (TemplateException e) {
            e.printStackTrace();
        }
    }
}
